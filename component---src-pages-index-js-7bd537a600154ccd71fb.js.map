{"version":3,"sources":["webpack:///./src/components/index/articleListItem.js","webpack:///./src/components/index/project.js","webpack:///./src/components/index/projectListItem.js","webpack:///./src/components/index/summary.js","webpack:///./src/pages/index.js"],"names":["ItemTitle","styled","Flex","p","theme","color","secondary","fontSize","h2","zilla","semibold","media","small","h3","ItemDate","light","xsm","sm","ItemExcerpt","s","ItemContainer","Container","title","date","slug","children","direction","href","style","textDecoration","justifyContent","Project","ProjectListItemWrapper","div","primary","ProjectListItemTitle","ProjectListItemText","ProjectListItem","link","target","rel","m","IndexPage","data","id","width","grow","allMarkdownRemark","edges","map","node","frontmatter","excerpt"],"mappings":"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","file":"component---src-pages-index-js-7bd537a600154ccd71fb.js","sourcesContent":["import Container from 'base/container'\nimport Flex from 'base/flex'\nimport React from 'react'\nimport styled from 'styled-components'\n\n\nconst ItemTitle = styled(Flex)`\n  color: ${p => p.theme.color.secondary};\n  font-size: ${p => p.theme.fontSize.h2 };\n  font-style: italic;\n  font-weight: ${p => p.theme.zilla.semibold};\n  letter-spacing: 0.77px;\n  text-align: left;\n  margin-bottom: 10px;\n\n  @media (${p => p.theme.media.small}) {\n    font-size: ${p => p.theme.fontSize.h3};\n  }\n`\n\nconst ItemDate = styled(Flex)`\n  font-weight: ${p => p.theme.zilla.light};\n  font-style: italic;\n  font-size: ${p => p.theme.fontSize.xsm};\n  letter-spacing: 0.66px;\n  text-align: right;\n\n  @media (${p => p.theme.media.small}) {\n    font-size: ${p => p.theme.fontSize.sm};\n  }\n`\n\nconst ItemExcerpt = styled(Flex)`\n  text-align: left;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  font-weight: ${p => p.theme.zilla.light};\n  font-size: ${p => p.theme.fontSize.sm};\n  letter-spacing: 0.67px;\n\n  @media (${p => p.theme.media.small}) {\n    font-weight: ${p => p.theme.zilla.light};\n    font-size: ${p => p.theme.fontSize.s};\n    letter-spacing: 0.66px;\n    margin-left: 0;\n  }\n`\n\nconst ItemContainer = styled(Container)`\n    border-bottom: 2px solid ${p => p.theme.color.secondary};\n    margin-bottom: 20px;\n\n    @media (${p => p.theme.media.small}) {\n      margin-bottom: 35px;\n    }\n`\n\nexport default ({ title, date, slug, children }) => {\n    return (\n      <ItemContainer direction=\"column\">\n        <a href={slug} style={{textDecoration: \"inherit\", color: \"inherit\"}}>\n          <Flex>\n            <Container justifyContent=\"space-between\">\n              <ItemTitle>{title}</ItemTitle>\n              <ItemDate>{date}</ItemDate>\n            </Container>\n          </Flex>\n          <ItemExcerpt>{children}</ItemExcerpt>\n        </a>\n      </ItemContainer>\n    )\n}\n","import styled from 'styled-components'\n\nimport Flex from 'base/flex'\n\nconst Project = styled(Flex)`\n  border-left: 2px solid ${p => p.theme.color.secondary};\n  border-radius: 10px;\n  border-top: 2px solid ${p => p.theme.color.secondary};\n  margin: auto;\n  margin-bottom: 10px;\n  padding: 20px;\n  max-width: 220px;\n  \n  @media (${p => p.theme.media.small}) {\n    display: none;\n  }\n`\n\nexport default Project;","import React from 'react'\nimport styled from 'styled-components'\n\nimport Container from 'base/container'\nimport Flex from 'base/flex'\n\nimport GithubIcon from 'assets/icons/github.svg'\n\nconst ProjectListItemWrapper = styled.div`\n  border-bottom: 2px solid ${p => p.theme.color.secondary};\n  margin: 15px 0;\n\n  p {\n    font-weight: ${p => p.theme.zilla.light};\n    font-size: 13px;\n    color: ${p => p.theme.color.primary};\n    letter-spacing: 0.66px;\n    text-align: left;\n  }\n`\n\nconst ProjectListItemTitle = styled(Flex)`\n    color: ${p => p.theme.color.secondary};\n    font-size: 14px;\n    font-style: italic;\n    font-weight: ${p => p.theme.zilla.semibold};\n    letter-spacing: 0.77px;\n    text-align: left;\n`\n\nconst ProjectListItemText = styled.p`\n    margin-top: 0;\n    margin-left: 10px;\n    margin-right: 10px;\n`\n\nconst ProjectListItem = ({ title, link, children }) => {\n    return (\n      <ProjectListItemWrapper>\n        <Container direction=\"column\">\n          <Flex>\n            <Container justifyContent=\"space-between\">\n              <ProjectListItemTitle>{title}</ProjectListItemTitle>\n              <Flex>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <GithubIcon />\n                </a>\n              </Flex>\n            </Container>\n          </Flex>\n          <Flex>\n            <ProjectListItemText>{children}</ProjectListItemText>\n          </Flex>\n        </Container>\n      </ProjectListItemWrapper>\n    )\n}\n\nexport default ProjectListItem","import styled from 'styled-components'\n\nexport default styled.p`\n  font-size: ${p => p.theme.fontSize.m};\n  font-weight: ${p => p.theme.zilla.semibold};\n  color: ${p => p.theme.color.primary};\n  letter-spacing: 0.77px;\n  margin-bottom: 40px;\n\n  @media (${p => p.theme.media.small}) {\n      margin-bottom: 35px;\n  }\n`","import Container from \"base/container\"\nimport Flex from \"base/flex\"\nimport PageTitle from \"base/pageTitle\"\nimport ArticleListItem from \"components/index/articleListItem\"\nimport Projects from \"components/index/project\"\nimport ProjectListItem from \"components/index/projectListItem\"\nimport Summary from \"components/index/summary\"\nimport Layout from \"components/layout\"\nimport ContentContainer from 'components/layout/contentContainer'\nimport MainArea from \"components/layout/mainArea\"\nimport SEO from \"components/seo\"\nimport { graphql } from \"gatsby\"\nimport React from \"react\"\nimport H3 from \"typography/h3\"\n\n\n\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <SEO title=\"Blog of Jan Meischner about Software Development and Productivity\" />\n      <Container direction=\"column\">\n        <PageTitle />\n        <Flex>\n          <ContentContainer id=\"main\" justifyContent=\"space-between\">\n            <Flex width=\"2\" grow=\"0\" />\n            <MainArea width=\"7\" grow=\"1\">\n              <Summary>\n                This Blog contains stories I experienced and lessons I learned\n                during daily work and while creating new ideas and projects.\n                This material should be a reference for myself and Iâ€™m more than\n                happy if it will help someone to solve her own challenges.\n              </Summary>\n              {data.allMarkdownRemark.edges.map(({ node }) => (\n                <ArticleListItem\n                  title={node.frontmatter.title}\n                  date={node.frontmatter.date}\n                  slug={node.frontmatter.slug}\n                >\n                  {node.excerpt}\n                </ArticleListItem>\n              ))}\n            </MainArea>\n            <Projects>\n              <H3>My Projects</H3>\n              <ProjectListItem\n                title=\"alfred-bear\"\n                link=\"https://github.com/jmeischner/alfred-bear\"\n              >\n                <strong>alfred-bear</strong> is a workflow to use in combination\n                with <a href=\"https://www.alfredapp.com\">alfred</a> for mac.\n                Create scripted templates in <a href=\"https://bear.app\">bear</a>{\" \"}\n                straight from alfred.\n              </ProjectListItem>\n              <ProjectListItem\n                title=\"todoco\"\n                link=\"https://github.com/jmeischner/todoco\"\n              >\n                <strong>todoco</strong> is a <em>command line tool</em> to\n                extract and work with <strong>ToDo</strong> comments in source\n                code. Implemented with\n                <ul>\n                  <li>\n                    <a href=\"https://github.com/jmeischner/todoco\">Rust</a>\n                  </li>\n                  <li>\n                    <a href=\"https://github.com/jmeischner/swift-todoco\">\n                      Swift\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"https://github.com/jmeischner/todoco-node\">\n                      NodeJS\n                    </a>\n                  </li>\n                </ul>\n              </ProjectListItem>\n              <ProjectListItem\n                title=\"QuickRunner\"\n                link=\"https://github.com/jmeischner/QuickRunner\"\n              >\n                Test Runner for Swift Packages in combination with Quick Testing\n                Framework\n              </ProjectListItem>\n            </Projects>\n          </ContentContainer>\n        </Flex>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt(truncate: true, pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title,\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}